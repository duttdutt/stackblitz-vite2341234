{"code":"import { foo } from './foo.js'\n\nfoo()\n\nif (import.meta.hot) {\n  import.meta.hot.accept('./foo.js', (newFoo) => {\n    // the callback receives the updated './foo.js' module\n    newFoo?.foo()\n  })\n\n  // Can also accept an array of dep modules:\n  import.meta.hot.accept(\n    ['./foo.js', './bar.js'],\n    ([newFooModule, newBarModule]) => {\n      // The callback receives an array where only the updated module is\n      // non null. If the update was not successful (syntax error for ex.),\n      // the array is empty\n    },\n  )\n}","nodes":[{"type":"hover","text":"(alias) const foo: () => void\nimport foo","start":9,"length":3,"target":"foo","line":0,"character":9},{"type":"hover","text":"(alias) foo(): void\nimport foo","start":32,"length":3,"target":"foo","line":2,"character":0},{"type":"hover","text":"","docs":"The type of `import.meta`.\n\nIf you need to declare that a given property exists on `import.meta`,\nthis type may be augmented via interface merging.","start":50,"length":4,"target":"meta","line":4,"character":11},{"type":"hover","text":"any","start":55,"length":3,"target":"hot","line":4,"character":16},{"type":"hover","text":"","docs":"The type of `import.meta`.\n\nIf you need to declare that a given property exists on `import.meta`,\nthis type may be augmented via interface merging.","start":71,"length":4,"target":"meta","line":5,"character":9},{"type":"hover","text":"any","start":76,"length":3,"target":"hot","line":5,"character":14},{"type":"hover","text":"any","start":80,"length":6,"target":"accept","line":5,"character":18},{"type":"hover","text":"(parameter) newFoo: any","start":100,"length":6,"target":"newFoo","line":5,"character":38},{"type":"hover","text":"(parameter) newFoo: any","start":176,"length":6,"target":"newFoo","line":7,"character":4},{"type":"hover","text":"any","start":184,"length":3,"target":"foo","line":7,"character":12},{"type":"hover","text":"","docs":"The type of `import.meta`.\n\nIf you need to declare that a given property exists on `import.meta`,\nthis type may be augmented via interface merging.","start":251,"length":4,"target":"meta","line":11,"character":9},{"type":"hover","text":"any","start":256,"length":3,"target":"hot","line":11,"character":14},{"type":"hover","text":"any","start":260,"length":6,"target":"accept","line":11,"character":18},{"type":"hover","text":"(parameter) newFooModule: any","start":304,"length":12,"target":"newFooModule","line":13,"character":6},{"type":"hover","text":"(parameter) newBarModule: any","start":318,"length":12,"target":"newBarModule","line":13,"character":20}],"meta":{"extension":"js","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/ynk/src/projects/docs/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[0,122]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"/foo.d.ts","filepath":"/Users/ynk/src/projects/docs//foo.d.ts","content":"// @filename: /foo.d.ts\nexport declare const foo: () => void\n\n","extension":"ts","supportLsp":true},{"offset":62,"filename":"/example.js","filepath":"/Users/ynk/src/projects/docs//example.js","content":"// @filename: /example.js\nimport 'vite/client'\n// ---cut---\nimport { foo } from './foo.js'\n\nfoo()\n\nif (import.meta.hot) {\n  import.meta.hot.accept('./foo.js', (newFoo) => {\n    // the callback receives the updated './foo.js' module\n    newFoo?.foo()\n  })\n\n  // Can also accept an array of dep modules:\n  import.meta.hot.accept(\n    ['./foo.js', './bar.js'],\n    ([newFooModule, newBarModule]) => {\n      // The callback receives an array where only the updated module is\n      // non null. If the update was not successful (syntax error for ex.),\n      // the array is empty\n    },\n  )\n}","extension":"js","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) const foo: () => void\nimport foo","start":9,"length":3,"target":"foo","line":0,"character":9},{"type":"hover","text":"(alias) foo(): void\nimport foo","start":32,"length":3,"target":"foo","line":2,"character":0},{"type":"hover","text":"","docs":"The type of `import.meta`.\n\nIf you need to declare that a given property exists on `import.meta`,\nthis type may be augmented via interface merging.","start":50,"length":4,"target":"meta","line":4,"character":11},{"type":"hover","text":"any","start":55,"length":3,"target":"hot","line":4,"character":16},{"type":"hover","text":"","docs":"The type of `import.meta`.\n\nIf you need to declare that a given property exists on `import.meta`,\nthis type may be augmented via interface merging.","start":71,"length":4,"target":"meta","line":5,"character":9},{"type":"hover","text":"any","start":76,"length":3,"target":"hot","line":5,"character":14},{"type":"hover","text":"any","start":80,"length":6,"target":"accept","line":5,"character":18},{"type":"hover","text":"(parameter) newFoo: any","start":100,"length":6,"target":"newFoo","line":5,"character":38},{"type":"hover","text":"(parameter) newFoo: any","start":176,"length":6,"target":"newFoo","line":7,"character":4},{"type":"hover","text":"any","start":184,"length":3,"target":"foo","line":7,"character":12},{"type":"hover","text":"","docs":"The type of `import.meta`.\n\nIf you need to declare that a given property exists on `import.meta`,\nthis type may be augmented via interface merging.","start":251,"length":4,"target":"meta","line":11,"character":9},{"type":"hover","text":"any","start":256,"length":3,"target":"hot","line":11,"character":14},{"type":"hover","text":"any","start":260,"length":6,"target":"accept","line":11,"character":18},{"type":"hover","text":"(parameter) newFooModule: any","start":304,"length":12,"target":"newFooModule","line":13,"character":6},{"type":"hover","text":"(parameter) newBarModule: any","start":318,"length":12,"target":"newBarModule","line":13,"character":20}],"tags":[]}